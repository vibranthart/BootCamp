Date: Week 2 - 2/5/21
================================================================================================
What is a Class?
class contains data and its related functionality, can contains only functionality
Not for instantiation

What is an Object?
representative of a class
what class has object has as well - functionality and data of class
Objects are independent of one another

Why should i use contructors?
instantiate an object -> initializes or creates an object 
constructors are used for instantiating classes
one folder cant keep classes with two classes

classes and objects
objections are portions of class
objects are independent - same functionality, different data 

Java compiler v/s interpreter
compiler 	-> converts from on eformat to another -> reads & converts entire program in one go
		-> it shows all errors
		-> fast conversion
		-> gives converted file 
		-> dont need compiler next time to xompile code

translator 	-> convert from on format to another -> reads & converts line by line
		-> shows errors line by line
		-> slow
		-> doesnt give anything
		-> you need everytime to run

Java Code -> Compiler : transforms to bytes -> JVM : Windows/Linux/Mac

JVM
1. class loader - inserts into memory
2. garbage collector - cant access data and throws out of memory - heap only
3. Manages Threads
4. Memory Management
5. Exception(Runtime errors) handling 
6. Interpeters - JIT (Just in Time) Compiler 


JVM + library === JRE (Java Runtime Environment)
JRE + Compiler == JDK (Java Development Kit)


during inheritance, what goes in subclass from superclass??
everything including private, but private members cant be accessible from super becauser of encapsualtion.


2/8/21 - NON-INTERVIEW
packages
					public		protected	default		private
same package non-subclass		yes		yes		yes		yes
Same package sub-class			yes		yes		yes		no
Different package non-sub class		yes		no 		no		no
Different package sub class		yes		yes		no 		no

======================================================================================
2/19/21

function package
predicate
consumer
function
supplier
stream API
------------------------------

interface - FunctionalInterface
FunctionalInterfaces -> ensures that an interface has exactly one abstract method
List of Integers -> filter all elements which are positive numbers
Predicate -> It checks a condition and return boolean - boolean test (T t) - abstract method
Consumer -> which accepts an argument and do not return anything - void accept (T t)
Supplier -> Do not accept any argument but return a value - T get()
Function => Accept Argument and return of value - R apply (T t)
void m(); -> Dont use because it doesnt accept anything or return anything



